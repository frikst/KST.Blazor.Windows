@page "/counter"

<h1>Counter</h1>

<p>Current count: @currentCount</p>

<WindowInfo />

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="OpenWindow">Open</button>
<button class="btn btn-primary" @onclick="OpenTab">Open as tab</button>

@if (aLastWindow is not null)
{
    <button class="btn btn-link" @onclick="ResetCount">Reset count in last window to new value</button>
}

@code {
    [Inject]
    public IWindowManagement WindowManagement { get; set; }

    [Parameter]
    public int Start { get; set; }
        = 0;

    private int currentCount = 0;
    private IWindow<Counter>? aLastWindow =  null;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this.currentCount = this.Start;
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    private async Task OpenWindow()
    {
        this.aLastWindow = await this.WindowManagement.OpenWindow<Counter>(new NewWindowOptions() { Title = "Counter" }, parameters => parameters
            .Set(p => p.Start, currentCount)
        );
    }

    private async Task OpenTab()
    {
        this.aLastWindow = await this.WindowManagement.OpenWindow<Counter>(NewWindowOptions.AsTab with{ Title = "Counter"}, parameters => parameters
            .Set(p => p.Start, currentCount)
        );
    }

    private void ResetCount()
    {
        if (this.aLastWindow is not null)
        {
            aLastWindow.ChangeParameters(parameters => parameters
                .Set(p => p.Start, currentCount)
            );
        }
    }
}
