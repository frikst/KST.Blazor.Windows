@page "/windows"
@using KST.Blazor.Windows.Abstractions
@implements IDisposable
@inject IWindowManagement WindowManagement

<h1>Windows</h1>

@if (this.WindowManagement.Windows.Any())
{
    <table class="table table-striped">
        <thead class="thead-light">
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Component type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var window in this.WindowManagement.Windows)
            {
                <tr>
                    <td>@window.Id</td>
                    <td>@window.Title</td>
                    <td><code>@window.ComponentType.FullName</code></td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="alert alert-primary" role="alert">No window opened yet</p>
}

<h1>Screens</h1>

<table class="table table-striped">
    <thead class="thead-light">
        <tr>
            <th>Position</th>
            <th>Size</th>
            <th>Primary</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var screen in this.WindowManagement.Screens)
        {
            var scr = screen;
            <tr>
                <td>@screen.Left, @screen.Top</td>
                <td>@screen.Width &times; @screen.Height</td>
                <td>@screen.IsPrimary</td>
                <td>
                    <button class="btn btn-secondary" @onclick="() => this.OpenCounter(scr)">Open counter</button>
                    <button class="btn btn-secondary" @onclick="() => this.OpenCounterCentered(scr)">Open counter centered</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.WindowManagement.WindowsChanged += OnWindowsChanged;
    }

    private void OnWindowsChanged(object? sender, EventArgs e)
    {
        this.StateHasChanged();
    }

    public void Dispose()
    {
        this.WindowManagement.WindowsChanged -= OnWindowsChanged;
    }

    private async Task OpenCounter(IScreen screen)
    {
        await this.WindowManagement.OpenWindowAsync<Counter>(new NewWindowOptions { Title = "Counter", InitialPosition = new WindowPositionMaximized {Screen = screen}});
    }

    private async Task OpenCounterCentered(IScreen screen)
    {
        await this.WindowManagement.OpenWindowAsync<Counter>(new NewWindowOptions { Title = "Counter", InitialPosition = new WindowPositionCentered(500, 500) { Screen = screen } });
    }

}
